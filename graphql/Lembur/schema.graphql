type Lembur {
    id: ID!
    user_profile_id: ID!
    proyek_id: ID
    tanggal: Date
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime

    userprofile: UserProfile @belongsTo
    proyek: Proyek @belongsTo
}

input CreateLemburInput {
    user_profile_id: ID!
    proyek_id: ID
    tanggal: Date!
}

input UpdateLemburInput {
    user_profile_id: ID
    proyek_id: ID
    tanggal: Date
}

extend type Query {
    allLembur: [Lembur!]!
    @all(model: "App\\Models\\Lembur\\Lembur")

    lembur(id: ID! @eq): Lembur
    @find(model: "App\\Models\\Lembur\\Lembur")

    lembursByUserProfile(user_profile_id: ID! @where(operator: "like", key: "user_profile_id")): [Lembur!]!
    @all(model: "App\\Models\\Lembur\\Lembur")
}

extend type Mutation {
    createLembur(input: CreateLemburInput! @spread): Lembur
    @create(model: "App\\Models\\Lembur\\Lembur")

    updateLembur(id: ID! @eq, input: UpdateLemburInput! @spread): Lembur
    @update(model: "App\\Models\\Lembur\\Lembur")

    deleteLembur(id: ID! @eq): Lembur
    @delete(model: "App\\Models\\Lembur\\Lembur")

    restoreLembur(id: ID!): Lembur
    @field(resolver: "App\\GraphQL\\Lembur\\Mutations\\LemburMutation@restore")

    forceDeleteLembur(id: ID!): Lembur
    @field(resolver: "App\\GraphQL\\Lembur\\Mutations\\LemburMutation@forceDelete")
}